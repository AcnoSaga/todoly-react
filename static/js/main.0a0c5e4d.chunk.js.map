{"version":3,"sources":["components/header/header.component.jsx","components/todo-item/todo-item.styles.jsx","redux/todo/todo.types.js","components/todo-item/todo-item.component.jsx","redux/todo/todo.actions.js","redux/todo/todo.selectors.js","components/todo-list/todo-list.component.jsx","components/add-item-input/add-item-input.styles.jsx","components/add-item-input/add-item-input.component.jsx","App.js","serviceWorker.js","redux/todo/todo.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["Header","Navbar","color","NavbarBrand","TodoItemBox","styled","div","DeleteTodoButtonBox","DeleteTodoButton","TodoActionTypes","ADD_ITEM","REMOVE_ITEM","CLEAR_ALL_TODOS","connect","dispatch","removeItem","item","type","payload","text","className","onClick","selectAllTodos","createSelector","require","state","todo","todos","console","log","mapStateToProps","createStructuredSelector","todoList","length","Container","fluid","map","todoItem","key","id","AddItemInputBox","addItem","useState","input","setInput","InputGroup","Input","onChange","event","target","value","InputGroupAddon","addonType","Button","App","Boolean","window","location","hostname","match","INITIAL_STATE","todoReducer","action","uid","filter","persistConfig","storage","rootReducer","combineReducers","persistReducer","store","createStore","applyMiddleware","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0a0c5e4d.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar, NavbarBrand } from 'reactstrap';\n\nconst Header = () => (\n\t<div>\n\t\t<Navbar color='dark'>\n\t\t\t<NavbarBrand>Todoly</NavbarBrand>\n\t\t</Navbar>\n\t</div>\n);\n\nexport default Header;\n","import styled from 'styled-components';\n\nexport const TodoItemBox = styled.div`\n\tword-break: break-all;\n\tborder-radius: 25px;\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: space-between;\n\tpadding: 2vh 3vw;\n\tmargin: 3vh 1vw;\n\ttext-align: left;\n\tbackground-color: #20232a;\n\tfont-size: large;\n\tbox-shadow: 5px 10px 10px #00000010;\n\n\t@media screen and (max-width: 800px) {\n\t\tpadding: 2vh 6vw;\n\t}\n\n\t&:hover {\n\t\t& > div {\n\t\t\topacity: 100%;\n\t\t}\n\t\tbackground-color: #1a1a1a;\n\t}\n`;\n\nexport const DeleteTodoButtonBox = styled.div`\n\tpadding: 0 10vw;\n\talign-items: center;\n\tjustify-content: center;\n\talign-self: center;\n\topacity: 0;\n`;\n\nexport const DeleteTodoButton = styled.div`\n\tcursor: pointer;\n`;\n","const TodoActionTypes = {\n\tADD_ITEM: 'ADD_ITEM',\n\tREMOVE_ITEM: 'REMOVE_ITEM',\n\tCLEAR_ALL_TODOS: 'CLEAR_ALL_TODOS',\n};\n\nexport default TodoActionTypes;\n","import React from 'react';\nimport {\n\tTodoItemBox,\n\tDeleteTodoButtonBox,\n\tDeleteTodoButton,\n} from './todo-item.styles';\nimport { removeItem } from '../../redux/todo/todo.actions';\nimport { connect } from 'react-redux';\n\nconst TodoItem = ({ item, removeItem }) => {\n\treturn (\n\t\t<TodoItemBox>\n\t\t\t{item.text}\n\t\t\t<DeleteTodoButtonBox className='asd'>\n\t\t\t\t<DeleteTodoButton onClick={() => removeItem(item)}>\n\t\t\t\t\t&#10005;\n\t\t\t\t</DeleteTodoButton>\n\t\t\t</DeleteTodoButtonBox>\n\t\t</TodoItemBox>\n\t);\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n\tremoveItem: (item) => dispatch(removeItem(item)),\n});\n\nexport default connect(null, mapDispatchToProps)(TodoItem);\n","import TodoActionTypes from './todo.types';\n\nexport const addItem = (item) => ({\n\ttype: TodoActionTypes.ADD_ITEM,\n\tpayload: item,\n});\n\nexport const removeItem = (item) => ({\n\ttype: TodoActionTypes.REMOVE_ITEM,\n\tpayload: item,\n});\n","const { createSelector } = require('reselect');\n\nconst selectTodos = (state) => state.todo;\n\nexport const selectAllTodos = createSelector([selectTodos], (todos) => {\n\tconsole.log(todos);\n\treturn todos.todos;\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Container } from 'reactstrap';\nimport TodoItem from '../todo-item/todo-item.component';\nimport { createStructuredSelector } from 'reselect';\nimport { selectAllTodos } from '../../redux/todo/todo.selectors';\n\nconst TodoList = ({ todos }) => {\n\tvar todoList = todos;\n\tconsole.log(todoList.length);\n\tconsole.log(todoList);\n\treturn (\n\t\t<Container fluid>\n\t\t\t{todoList.map((todoItem) => (\n\t\t\t\t<TodoItem key={todoItem.id} item={todoItem} />\n\t\t\t))}\n\t\t</Container>\n\t);\n};\n\nconst mapStateToProps = createStructuredSelector({\n\ttodos: selectAllTodos,\n});\n\nexport default connect(mapStateToProps)(TodoList);\n","import styled from 'styled-components';\n\nexport const AddItemInputBox = styled.div`\n\tpadding: 5vh 5vw;\n`;\n","import React, { useState } from 'react';\nimport { InputGroup, Input, InputGroupAddon, Button } from 'reactstrap';\nimport { AddItemInputBox } from './add-item-input.styles';\nimport { addItem } from '../../redux/todo/todo.actions';\nimport { connect } from 'react-redux';\n\nconst AddItemInput = ({ addItem }) => {\n\tconst [input, setInput] = useState('');\n\treturn (\n\t\t<AddItemInputBox>\n\t\t\t<InputGroup>\n\t\t\t\t<Input\n\t\t\t\t\tonChange={(event) => setInput(event.target.value)}\n\t\t\t\t\tvalue={input}\n\t\t\t\t\ttype='textarea'\n\t\t\t\t/>\n\t\t\t\t<InputGroupAddon addonType='append'>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tcolor='success'\n\t\t\t\t\t\ttype='submit'\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tif (input !== '') {\n\t\t\t\t\t\t\t\tsetInput('');\n\t\t\t\t\t\t\t\taddItem({\n\t\t\t\t\t\t\t\t\ttext: input,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tAdd Todo\n\t\t\t\t\t</Button>\n\t\t\t\t</InputGroupAddon>\n\t\t\t</InputGroup>\n\t\t</AddItemInputBox>\n\t);\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n\taddItem: (item) => dispatch(addItem(item)),\n});\n\nexport default connect(null, mapDispatchToProps)(AddItemInput);\n","import React from 'react';\nimport './App.css';\nimport Header from './components/header/header.component';\nimport TodoList from './components/todo-list/todo-list.component';\nimport AddItemInput from './components/add-item-input/add-item-input.component';\n\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Header />\n\t\t\t<TodoList />\n\t\t\t<AddItemInput />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import TodoActionTypes from './todo.types';\nimport uid from 'uid';\n\nconst INITIAL_STATE = {\n\ttodos: [],\n};\n\nconst todoReducer = (state = INITIAL_STATE, action) => {\n\tswitch (action.type) {\n\t\tcase TodoActionTypes.ADD_ITEM:\n\t\t\tconst todo = action.payload;\n\t\t\ttodo.id = uid(25);\n\t\t\tconsole.log(state);\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttodos: [todo, ...state.todos],\n\t\t\t};\n\t\tcase TodoActionTypes.REMOVE_ITEM:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttodos: state.todos.filter(\n\t\t\t\t\t(todo) => todo.id !== action.payload.id\n\t\t\t\t),\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default todoReducer;\n","import { combineReducers } from 'redux';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport todoReducer from './todo/todo.reducer';\n\nconst persistConfig = {\n\tkey: 'a',\n\tstorage,\n};\n\nconst rootReducer = combineReducers({\n\ttodo: todoReducer,\n});\n\nexport default persistReducer(persistConfig, rootReducer);\n","import logger from 'redux-logger';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './root-reducer';\nimport { persistStore } from 'redux-persist';\n\nconst middlewares = [];\n\nif (process.env.NODE_ENV === 'development') {\n\tmiddlewares.push(logger);\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nexport const persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { persistor, store } from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<React.StrictMode>\n\t\t\t<PersistGate persistor={persistor}>\n\t\t\t\t<App />\n\t\t\t</PersistGate>\n\t\t</React.StrictMode>\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}